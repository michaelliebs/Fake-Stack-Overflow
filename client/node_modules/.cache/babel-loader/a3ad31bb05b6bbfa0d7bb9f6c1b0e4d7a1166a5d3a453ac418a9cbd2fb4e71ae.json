{"ast":null,"code":"var _jsxFileName = \"/Users/michaelliebs/pa04-bananaboys/client/src/components/AnswerForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../stylesheets/index.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnswerForm = ({\n  questionId,\n  onAnswerClose\n}) => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [answerText, setAnswerText] = useState('');\n  const [textError, setTextError] = useState('');\n\n  // Function to handle posting a new answer\n  const postNewAnswer = async () => {\n    let isValid = true;\n    setTextError('');\n    if (!answerText.trim()) {\n      setTextError('Answer text cannot be empty.');\n      isValid = false;\n    }\n\n    //hyperlinks validation check \n    const hyperlinkRegex = /\\[([^\\]]*)\\]\\(([^\\s)]*)\\)/g;\n    const matches = [...answerText.matchAll(hyperlinkRegex)];\n    const invalidLinks = matches.filter(match => {\n      const text = match[1];\n      const url = match[2];\n      return text === '' || !url.startsWith('http://') && !url.startsWith('https://');\n    });\n    if (invalidLinks.length > 0) {\n      setTextError('All hyperlinks must start with \"http://\" or \"https://\" and must not be empty.');\n      isValid = false;\n    }\n    if (isValid) {\n      try {\n        await axios.post(`http://localhost:8000/questions/${questionId}/answers`, {\n          text: answerText.trim(),\n          ans_by: username.trim(),\n          ans_date_time: new Date()\n        });\n\n        // Clear form and close answer form upon succesful submission\n        setUsername('');\n        setAnswerText('');\n        onAnswerClose(questionId);\n      } catch (error) {\n        console.error('Error posting answer:', error);\n        setTextError('Failed to post the answer.');\n      }\n    }\n  };\n\n  // Handler for form submission\n  const handleSubmit = event => {\n    event.preventDefault();\n    postNewAnswer();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"new-answer-container\",\n    className: \"answer-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"new-answer-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"answer-text\",\n          children: \"Answer Text*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"answer-text\",\n          value: answerText,\n          onChange: e => {\n            setAnswerText(e.target.value);\n            setUsername('Anonymous');\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), textError && /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"text-error\",\n          className: \"error-message\",\n          children: textError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Post Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"* Indicates Required Field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(AnswerForm, \"s9P1xAt97+YUtGj2OR7z7hMSt30=\");\n_c = AnswerForm;\nexport default AnswerForm;\nvar _c;\n$RefreshReg$(_c, \"AnswerForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","AnswerForm","questionId","onAnswerClose","_s","username","setUsername","answerText","setAnswerText","textError","setTextError","postNewAnswer","isValid","trim","hyperlinkRegex","matches","matchAll","invalidLinks","filter","match","text","url","startsWith","length","post","ans_by","ans_date_time","Date","error","console","handleSubmit","event","preventDefault","id","className","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","type","style","color","_c","$RefreshReg$"],"sources":["/Users/michaelliebs/pa04-bananaboys/client/src/components/AnswerForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../stylesheets/index.css';\nimport axios from 'axios';\n\nconst AnswerForm = ({ questionId, onAnswerClose }) => {\n  const [username, setUsername] = useState('');\n  const [answerText, setAnswerText] = useState('');\n  const [textError, setTextError] = useState('');\n\n  // Function to handle posting a new answer\n  const postNewAnswer = async () => {\n    let isValid = true;\n    setTextError('');\n\n    if (!answerText.trim()) {\n      setTextError('Answer text cannot be empty.');\n      isValid = false;\n    }\n\n    //hyperlinks validation check \n    const hyperlinkRegex = /\\[([^\\]]*)\\]\\(([^\\s)]*)\\)/g;\n    const matches = [...answerText.matchAll(hyperlinkRegex)];\n    const invalidLinks = matches.filter(match => {\n      const text = match[1];\n      const url = match[2];\n      return text === '' || (!url.startsWith('http://') && !url.startsWith('https://'));\n    });\n\n    if (invalidLinks.length > 0) {\n      setTextError('All hyperlinks must start with \"http://\" or \"https://\" and must not be empty.');\n      isValid = false;\n    }\n\n    if (isValid) {\n      try {\n        await axios.post(`http://localhost:8000/questions/${questionId}/answers`, {\n          text: answerText.trim(),\n          ans_by: username.trim(),\n          ans_date_time: new Date()\n      });\n      \n      // Clear form and close answer form upon succesful submission\n      setUsername('');\n      setAnswerText('');\n      onAnswerClose(questionId);\n      } catch (error) {\n      console.error('Error posting answer:', error);\n      setTextError('Failed to post the answer.');\n      }\n    }\n  };\n\n  // Handler for form submission\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    postNewAnswer();\n  };\n\n  return (\n    <div id=\"new-answer-container\" className=\"answer-form-container\">\n      <form id=\"new-answer-form\" onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"answer-text\">Answer Text*</label>\n          <textarea\n            id=\"answer-text\"\n            value={answerText}\n            onChange={(e) => {setAnswerText(e.target.value); setUsername('Anonymous');}}\n          />\n          {textError && <div id=\"text-error\" className=\"error-message\">{textError}</div>}\n        </div>\n        <button type=\"submit\">Post Answer</button>\n      </form>\n      <p style={{color: 'red'}}>* Indicates Required Field</p>\n    </div>\n  );\n};\n\nexport default AnswerForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}